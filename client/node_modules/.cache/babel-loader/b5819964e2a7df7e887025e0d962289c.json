{"ast":null,"code":"var _jsxFileName = \"/Users/emilyhernandez/Documents/story-gear-ecommerce/client/src/Components/Products/index.jsx\";\nimport React from 'react';\nimport ListProducts from './ListProducts';\nimport { withRouter } from 'react-router-dom';\nimport './index.css';\n\nclass Products extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //\"category\" in MySQL\n      type: \"\",\n      //\"monetary_value\" in MySQL\n      price: \"\",\n      products: null\n    };\n    this.type = React.createRef();\n    this.price = React.createRef();\n\n    this.handleProductChange = e => {\n      this.setState({\n        type: this.type.current.value\n      });\n    };\n\n    this.handlePriceChange = e => {\n      this.setState({\n        price: this.price.current.value\n      });\n    };\n  }\n\n  fetchContent() {\n    const _this$state = this.state,\n          type = _this$state.type,\n          price = _this$state.price;\n    let dataURL = '/api/products'; // depending on the type or price that the client chooses, it will affect the outcome of the if else statement\n\n    if (type) {\n      dataURL += \"/type/\".concat(type); // above is equivalent to --> dataURL = dataURL + `/type/${type}`\n    } else {\n      dataURL += \"/type/all\";\n    }\n\n    ; //price filter\n\n    if (price) {\n      dataURL += \"/price/\".concat(price);\n    } else {\n      dataURL += \"/price/all\";\n    }\n\n    ; // fetches data from database\n\n    fetch(dataURL).then(res => res.json()) // takes the data and turns it into json\n    .then(items => {\n      this.setState({\n        products: items // sets state to all the items that were brought back\n\n      });\n    });\n  }\n\n  // finish commenting this one!\n  componentDidMount() {\n    //how does this work if it isnt using fetchContent?\n    const _this$props$match$par = this.props.match.params,\n          type = _this$props$match$par.type,\n          price = _this$props$match$par.price;\n    console.log(this.props.match.params);\n    this.setState({\n      type: type,\n      price: price\n    }); // this.fetchContent()\n  }\n\n  componentDidUpdate(oldProps, oldState) {\n    console.log('componentDidUpdate', this.state, oldState);\n\n    if (this.state.type !== oldState.type || this.state.price !== oldState.price) {\n      this.fetchContent(); // make an if for price and category if they changed in state by comparing using prev.props\n    }\n\n    ;\n  }\n\n  render() {\n    const productResults = this.state.products; //this sets it up so that if there's no data to work with in the beginning, it checks to see if there is data. you will always be null when you start the server and wait for the data to come back \n    // const products = (productResults !== null) \n    //     ? productResults \n    //     : \"fail\"\n    //let = mapProducts because of scoping, so that it can be accessed \n\n    let mapProducts = []; //if productsResults exists, then map through the things and reassign their names so that they can go in their respective spots\n\n    if (productResults !== null) {\n      mapProducts = productResults.map(({\n        product_name: title,\n        product_image: image,\n        product_alt_desc: alt,\n        item_description: description,\n        price\n      }) => {\n        return React.createElement(ListProducts, {\n          product: {\n            title,\n            image,\n            alt,\n            description,\n            price\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        });\n      });\n    }\n\n    ;\n\n    this.presentation = () => {\n      if (productResults == null) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, \"\\\"Please wait, the page is loading\\\"\");\n      }\n\n      if (productResults !== null) {\n        return productResults && mapProducts;\n      }\n    };\n\n    return React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"desktop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      id: \"slogan\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Tell Us A Story.\")), React.createElement(\"form\", {\n      className: \"filter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      className: \"select\",\n      ref: this.type,\n      onChange: this.handleProductChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"all\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"All Products\"), React.createElement(\"option\", {\n      value: \"cameras\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Cameras\"), React.createElement(\"option\", {\n      value: \"lens\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Lens\"), React.createElement(\"option\", {\n      value: \"tripods\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Tripods\"), React.createElement(\"option\", {\n      value: \"lights\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Lights\"), React.createElement(\"option\", {\n      value: \"camera-bags\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Camera Bags\"), React.createElement(\"option\", {\n      value: \"storage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Storage\")), React.createElement(\"select\", {\n      className: \"select\",\n      ref: this.price,\n      onChange: this.handlePriceChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"all\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"All Prices\"), React.createElement(\"option\", {\n      value: \"low\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Low (0-499 USD)\"), React.createElement(\"option\", {\n      value: \"medium\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Medium (500-999 USD)\"), React.createElement(\"option\", {\n      value: \"high\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"High (1000+ USD)\"))), this.presentation());\n  }\n\n}\n\n;\nexport default withRouter(Products);","map":{"version":3,"sources":["/Users/emilyhernandez/Documents/story-gear-ecommerce/client/src/Components/Products/index.jsx"],"names":["React","ListProducts","withRouter","Products","Component","state","type","price","products","createRef","handleProductChange","e","setState","current","value","handlePriceChange","fetchContent","dataURL","fetch","then","res","json","items","componentDidMount","props","match","params","console","log","componentDidUpdate","oldProps","oldState","render","productResults","mapProducts","map","product_name","title","product_image","image","product_alt_desc","alt","item_description","description","presentation"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ListProducts from './ListProducts';\nimport {withRouter} from 'react-router-dom';\nimport './index.css';\n\nclass Products extends React.Component {\n  state = {\n      //\"category\" in MySQL\n      type: \"\",\n      //\"monetary_value\" in MySQL\n      price: \"\",\n      products: null,\n    }\n\n  type = React.createRef();\n  price = React.createRef();\n\n  fetchContent() {\n    const {type, price} = this.state;\n    let dataURL = '/api/products';\n\n    // depending on the type or price that the client chooses, it will affect the outcome of the if else statement\n    if (type) {\n      dataURL += `/type/${type}`\n      // above is equivalent to --> dataURL = dataURL + `/type/${type}`\n    } else {\n      dataURL += `/type/all`\n    };\n    //price filter\n    if (price) {\n      dataURL += `/price/${price}`\n    } else {\n      dataURL += `/price/all`\n    };\n\n    // fetches data from database\n    fetch(dataURL)\n    .then(res => res.json())\n    // takes the data and turns it into json\n    .then(items => {\n      this.setState({\n        products: items\n        // sets state to all the items that were brought back\n      });\n    });\n  };\n\n  // finish commenting this one!\n  componentDidMount() {\n    //how does this work if it isnt using fetchContent?\n    const {type, price} = this.props.match.params;\n    console.log(this.props.match.params)\n    this.setState({\n      type: type,\n      price: price\n    });\n    // this.fetchContent()\n  };\n\n  componentDidUpdate(oldProps, oldState) {\n    console.log('componentDidUpdate', this.state, oldState)\n    if (this.state.type !== oldState.type || this.state.price !== oldState.price) {\n      this.fetchContent()\n      // make an if for price and category if they changed in state by comparing using prev.props\n    };\n  };\n\n  handleProductChange = (e) => {\n    this.setState({\n      type: this.type.current.value\n    });\n  };\n\n  handlePriceChange = (e) => {\n    this.setState({\n      price: this.price.current.value\n    });\n  };\n\n  render() {\n      const productResults = this.state.products\n      //this sets it up so that if there's no data to work with in the beginning, it checks to see if there is data. you will always be null when you start the server and wait for the data to come back \n      // const products = (productResults !== null) \n      //     ? productResults \n      //     : \"fail\"\n\n      //let = mapProducts because of scoping, so that it can be accessed \n      let mapProducts = []\n\n      //if productsResults exists, then map through the things and reassign their names so that they can go in their respective spots\n      if (productResults !== null) {\n         mapProducts = productResults.map((\n           {\n             product_name: title,\n             product_image: image,\n             product_alt_desc: alt,\n             item_description: description,\n             price,\n            }) => {\n          return <ListProducts \n                  product={{title, image, alt, description, price}}\n                  />\n            });\n      };\n\n      this.presentation = () => {  \n      if (productResults == null) {\n        return <p>\"Please wait, the page is loading\"</p>\n      }\n      if (productResults !== null) {\n        return productResults && mapProducts\n      }};\n\n      \n\n    return (\n      <div className=\"main\"> \n        <div className=\"desktop\">\n          <p id=\"slogan\">Tell Us A Story.</p>\n        </div>\n\n        <form className=\"filter\">\n          <select className=\"select\" ref={this.type} onChange= {this.handleProductChange}>\n          <option value=\"all\">All Products</option>\n          <option value=\"cameras\">Cameras</option>\n          <option value=\"lens\">Lens</option>\n          <option value=\"tripods\">Tripods</option>\n          <option value=\"lights\">Lights</option>\n          <option value=\"camera-bags\">Camera Bags</option>\n          <option value=\"storage\">Storage</option>\n        </select>\n        <select className=\"select\" ref={this.price} onChange= {this.handlePriceChange}>\n          <option value=\"all\">All Prices</option>\n          <option value=\"low\">Low (0-499 USD)</option>\n          <option value=\"medium\">Medium (500-999 USD)</option>\n          <option value=\"high\">High (1000+ USD)</option>\n        </select>\n        </form>\n      \n        {this.presentation()}\n      </div>\n    );\n  };\n};\n\nexport default withRouter(Products);"]},"metadata":{},"sourceType":"module"}